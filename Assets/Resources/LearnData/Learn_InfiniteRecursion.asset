%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b2140b81f360898408145e4ffc872afc, type: 3}
  m_Name: Learn_InfiniteRecursion
  m_EditorClassIdentifier: 
  id: infiniteRecursion
  tag: 1
  title: "Recurs\xE3o Infinita"
  description: "A recurs\xE3o infinita ocorre quando uma fun\xE7\xE3o ou algoritmo
    chama a si mesmo repetidamente, sem nenhuma condi\xE7\xE3o de parada, criando
    um loop sem fim. Isso acontece porque cada chamada gera outra chamada id\xEAntica,
    consumindo mem\xF3ria e processamento at\xE9 travar o programa.  \r\n\r\nEm programa\xE7\xE3o,
    a recurs\xE3o \xE9 \xFAtil para resolver problemas dividindo-os em partes menores,
    mas precisa de um caso base para interromper as chamadas. Se esse limite n\xE3o
    existe ou falha, a recurs\xE3o vira infinita.  \r\n\r\nUm exemplo simples seria
    uma fun\xE7\xE3o que imprime um n\xFAmero e chama a si mesma novamente, sem diminuir
    o valor. O resultado? O computador trava ou excede o limite da pilha de execu\xE7\xE3o
    (stack overflow). Por isso, \xE9 essencial definir crit\xE9rios de parada claros
    ao usar recurs\xE3o."
  icon: {fileID: 0}
